# ==========================================
# FILE: src/streamlit_app/utils/export_utils.py
# ==========================================
"""Export utilities for research tools."""

import json
import streamlit as st
from datetime import datetime
from typing import List, Dict, Any

class ExportUtils:
    """Utilities for exporting data and generating reports."""
    
    @staticmethod
    def generate_bibtex_citations(results: List[Dict[str, Any]]) -> str:
        """Generate BibTeX citations from search results."""
        citations = []
        for i, result in enumerate(results):
            citation = f"""@article{{historical_text_{i + 1},
    title={{{result['metadata']['filename']}}},
    period={{{result['metadata']['period']}}},
    genre={{{result['metadata']['genre']}}},
    confidence={{{result['confidence']}}}
}}"""
            citations.append(citation)
        
        return "\n\n".join(citations)
    
    @staticmethod
    def prepare_json_export(query: str, results: List[Dict[str, Any]]) -> str:
        """Prepare JSON export of search data."""
        data = {
            'query': query,
            'results': results,
            'timestamp': datetime.now().isoformat(),
            'total_results': len(results)
        }
        
        return json.dumps(data, indent=2, ensure_ascii=False)
    
    @staticmethod
    def generate_share_url(query: str) -> str:
        """Generate shareable URL."""
        base_url = st.get_option('server.baseUrlPath') or "http://localhost:8501"
        return f"{base_url}?query={query}"
    
    @staticmethod
    def generate_markdown_report(query: str, results: List[Dict[str, Any]]) -> str:
        """Generate markdown research report."""
        report = f"""# Research Report

**Query:** {query}  
**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**Results Found:** {len(results)}

## Summary

This research query returned {len(results)} relevant results from the German historical corpus.

## Key Findings

{chr(10).join([f"- {result['metadata']['genre']} text from {result['metadata']['period']}" for result in results[:5]])}

## Detailed Results

{chr(10).join([f"### {i+1}. {result['metadata']['filename']}\\n\\n**Period:** {result['metadata']['period']}  \\n**Genre:** {result['metadata']['genre']}  \\n**Confidence:** {result['confidence']*100:.1f}%\\n\\n{result['text'][:300]}...\\n" for i, result in enumerate(results)])}

---
*Generated by German Historical Corpus RAG System*
"""
        return report